% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr_methods.R
\name{distinct}
\alias{distinct}
\alias{filter}
\alias{filter.SummarizedExperiment}
\alias{group_by}
\alias{summarise}
\alias{mutate}
\alias{rename}
\alias{rowwise}
\alias{left_join}
\alias{inner_join}
\alias{right_join}
\alias{full_join}
\alias{slice}
\alias{select}
\alias{sample_n}
\alias{sample_frac}
\alias{count}
\alias{pull}
\title{distinct}
\usage{
\method{filter}{SummarizedExperiment}(.data, ..., .by = NULL, .preserve = FALSE)
}
\arguments{
\item{.data}{A tidySummarizedExperiment object or any data frame}

\item{...}{For use by methods.}

\item{.by}{A character vector of variables to join by. (See dplyr)}

\item{.preserve}{when \code{FALSE} (the default), the grouping structure
is recalculated based on the resulting data, otherwise it is kept as is.}

\item{.keep_all}{If TRUE, keep all variables in .data. If a combination
of ... is not distinct, this keeps the first row of values. (See dplyr)}

\item{data}{Input data frame.}

\item{y}{tbls to join. (See dplyr)}

\item{by}{A character vector of variables to join by. (See dplyr)}

\item{copy}{If x and y are not from the same data source, and copy is TRUE,
then y will be copied into the same src as x. (See dplyr)}

\item{suffix}{If there are non-joined duplicate variables in x and y, these
suffixes will be added to the output to disambiguate them. Should be a
character vector of length 2. (See dplyr)}

\item{tbl}{A data.frame.}

\item{size}{<\code{\link[=dplyr_tidy_select]{tidy-select}}>
For \code{sample_n()}, the number of rows to select.
For \code{sample_frac()}, the fraction of rows to select.
If \code{tbl} is grouped, \code{size} applies to each group.}

\item{replace}{Sample with or without replacement?}

\item{weight}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> Sampling weights.
This must evaluate to a vector of non-negative numbers the same length as
the input. Weights are automatically standardised to sum to 1.}

\item{.env}{DEPRECATED.}

\item{x}{A data frame, data frame extension (e.g. a tibble), or a
lazy data frame (e.g. from dbplyr or dtplyr).}

\item{wt}{<\code{\link[=dplyr_data_masking]{data-masking}}> Frequency weights.
Can be \code{NULL} or a variable:
\itemize{
\item If \code{NULL} (the default), counts the number of rows in each group.
\item If a variable, computes \code{sum(wt)} for each group.
}}

\item{sort}{If \code{TRUE}, will show the largest groups at the top.}

\item{.drop}{For \code{count()}: if \code{FALSE} will include counts for empty groups
(i.e. for levels of factors that don't exist in the data). Deprecated in
\code{add_count()} since it didn't actually affect the output.}

\item{name}{An optional parameter that specifies the column to be used
as names for a named vector. Specified in a similar manner as \code{var}.}
}
\value{
A tidySummarizedExperiment object

An object of the same type as \code{.data}.
\itemize{
\item Rows are a subset of the input, but appear in the same order.
\item Columns are not modified.
\item The number of groups may be reduced (if \code{.preserve} is not \code{TRUE}).
\item Data frame attributes are preserved.
}

A \link[=grouped_df]{grouped data frame}, unless the combination of
\code{...} and \code{add} yields a non empty set of grouping columns, a
regular (ungrouped) data frame otherwise.

An object \emph{usually} of the same type as \code{.data}.
\itemize{
\item The rows come from the underlying \code{group_keys()}.
\item The columns are a combination of the grouping keys and the summary
expressions that you provide.
\item If \code{x} is grouped by more than one variable, the output will be another
\link{grouped_df} with the right-most group removed.
\item If \code{x} is grouped by one variable, or is not grouped, the output will
be a \link{tibble}.
\item Data frame attributes are \strong{not} preserved, because \code{summarise()}
fundamentally creates a new data frame.
}

An object of the same type as \code{.data}.

For \code{mutate()}:
\itemize{
\item Rows are not affected.
\item Existing columns will be preserved unless explicitly modified.
\item New columns will be added to the right of existing columns.
\item Columns given value \code{NULL} will be removed
\item Groups will be recomputed if a grouping variable is mutated.
\item Data frame attributes are preserved.
}

For \code{transmute()}:
\itemize{
\item Rows are not affected.
\item Apart from grouping variables, existing columns will be remove unless
explicitly kept.
\item Column order matches order of expressions.
\item Groups will be recomputed if a grouping variable is mutated.
\item Data frame attributes are preserved.
}

An object of the same type as \code{.data}.
\itemize{
\item Rows are not affected.
\item Column names are changed; column order is preserved
\item Data frame attributes are preserved.
\item Groups are updated to reflect new names.
}

A \code{tbl}

A \code{tbl}

A tidySummarizedExperiment object

A tidySummarizedExperiment object

A tidySummarizedExperiment object

A tidySummarizedExperiment object

An object of the same type as \code{.data}. The output has the following
properties:
\itemize{
\item Each row may appear 0, 1, or many times in the output.
\item Columns are not modified.
\item Groups are not modified.
\item Data frame attributes are preserved.
}

An object of the same type as \code{.data}. The output has the following
properties:
\itemize{
\item Rows are not affected.
\item Output columns are a subset of input columns, potentially with a different
order. Columns will be renamed if \code{new_name=old_name} form is used.
\item Data frame attributes are preserved.
\item Groups are maintained; you can't select off grouping variables.
}

A tidySummarizedExperiment object

An object of the same type as \code{.data}. \code{count()} and \code{add_count()}
group transiently, so the output has the same groups as the input.

A vector the same size as \code{.data}.
}
\description{
\code{filter()} retains the rows where the conditions you provide a \code{TRUE}. Note
that, unlike base subsetting with \code{[}, rows where the condition evaluates
to \code{NA} are dropped.

\code{summarise()} creates a new data frame. It will have one (or more) rows for
each combination of grouping variables; if there are no grouping variables,
the output will have a single row summarising all observations in the input.
It will contain one column for each grouping variable and one column
for each of the summary statistics that you have specified.

\code{summarise()} and \code{summarize()} are synonyms.

\code{mutate()} adds new variables and preserves existing ones;
\code{transmute()} adds new variables and drops existing ones.
New variables overwrite existing variables of the same name.
Variables can be removed by setting their value to \code{NULL}.

Rename individual variables using \code{new_name=old_name} syntax.

See \href{https://github.com/jennybc/row-oriented-workflows}{this repository}
for alternative ways to perform row-wise operations.

\code{slice()} lets you index rows by their (integer) locations. It allows you
to select, remove, and duplicate rows. It is accompanied by a number of
helpers for common use cases:
\itemize{
\item \code{slice_head()} and \code{slice_tail()} select the first or last rows.
\item \code{slice_sample()} randomly selects rows.
\item \code{slice_min()} and \code{slice_max()} select rows with highest or lowest values
of a variable.
}

If \code{.data} is a \link{grouped_df}, the operation will be performed on each group,
so that (e.g.) \code{slice_head(df, n=5)} will select the first five rows in
each group.

Select (and optionally rename) variables in a data frame, using a concise
mini-language that makes it easy to refer to variables based on their name
(e.g. \code{a:f} selects all columns from \code{a} on the left to \code{f} on the
right). You can also use predicate functions like is.numeric to select
variables based on their properties.

\Sexpr[results=rd, stage=render]{lifecycle::badge("superseded")}
\code{sample_n()} and \code{sample_frac()} have been superseded in favour of
\code{\link[=slice_sample]{slice_sample()}}. While they will not be deprecated in the near future,
retirement means that we will only perform critical bug fixes, so we recommend
moving to the newer alternative.

These functions were superseded because we realised it was more convenient to
have two mutually exclusive arguments to one function, rather than two
separate functions. This also made it to clean up a few other smaller
design issues with \code{sample_n()}/\code{sample_frac}:
\itemize{
\item The connection to \code{slice()} was not obvious.
\item The name of the first argument, \code{tbl}, is inconsistent with other
single table verbs which use \code{.data}.
\item The \code{size} argument uses tidy evaluation, which is surprising and
undocumented.
\item It was easier to remove the deprecated \code{.env} argument.
\item \code{...} was in a suboptimal position.
}

\code{count()} lets you quickly count the unique values of one or more variables:
\code{df |> count(a, b)} is roughly equivalent to
\code{df |> group_by(a, b) |> summarise(n=n())}.
\code{count()} is paired with \code{tally()}, a lower-level helper that is equivalent
to \code{df |> summarise(n=n())}. Supply \code{wt} to perform weighted counts,
switching the summary from \code{n=n()} to \code{n=sum(wt)}.

\code{add_count()} are \code{add_tally()} are equivalents to \code{count()} and \code{tally()}
but use \code{mutate()} instead of \code{summarise()} so that they add a new column
with group-wise counts.

\code{pull()} is similar to \code{$}. It's mostly useful because it looks a little
nicer in pipes, it also works with remote data frames, and it can optionally
name the output.
}
\details{
dplyr is not yet smart enough to optimise filtering optimisation
on grouped datasets that don't need grouped calculations. For this reason,
filtering is often considerably faster on \code{\link[=ungroup]{ungroup()}}ed data.

\code{rowwise()} is used for the results of \code{\link[=do]{do()}} when you
create list-variables. It is also useful to support arbitrary
complex operations that need to be applied to each row.

Currently, rowwise grouping only works with data frames. Its
main impact is to allow you to work with list-variables in
\code{\link[=summarise]{summarise()}} and \code{\link[=mutate]{mutate()}} without having to
use \code{[[1]]}. This makes \code{summarise()} on a rowwise tbl
effectively equivalent to \code{\link[plyr:ldply]{plyr::ldply()}}.

Slice does not work with relational databases because they have no
intrinsic notion of row order. If you want to perform the equivalent
operation, use \code{\link[=filter]{filter()}} and \code{\link[=row_number]{row_number()}}.
}
\section{Useful filter functions}{

\itemize{
\item \code{\link{==}}, \code{\link{>}}, \code{\link{>=}} etc
\item \code{\link{&}}, \code{\link{|}}, \code{\link{!}}, \code{\link[=xor]{xor()}}
\item \code{\link[=is.na]{is.na()}}
\item \code{\link[=between]{between()}}, \code{\link[=near]{near()}}
}
}

\section{Grouped tibbles}{


Because filtering expressions are computed within groups, they may
yield different results on grouped tibbles. This will be the case
as soon as an aggregating, lagging, or ranking function is
involved. Compare this ungrouped filtering:

The former keeps rows with \code{mass} greater than the global average
whereas the latter keeps rows with \code{mass} greater than the gender

average.



Because mutating expressions are computed within groups, they may
yield different results on grouped tibbles. This will be the case
as soon as an aggregating, lagging, or ranking function is
involved. Compare this ungrouped mutate:
}

\section{Methods}{

This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:


These function are \strong{generic}s, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

Methods available in currently loaded packages:


This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:


These function are \strong{generic}s, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

Methods available in currently loaded packages:


This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:


These function are \strong{generic}s, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

Methods available in currently loaded packages:
\itemize{
\item \code{slice()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice")}.
\item \code{slice_head()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice_head")}.
\item \code{slice_tail()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice_tail")}.
\item \code{slice_min()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice_min")}.
\item \code{slice_max()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice_max")}.
\item \code{slice_sample()}: \Sexpr[stage=render,results=rd]{dplyr:::methods_rd("slice_sample")}.
}


This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:
\Sexpr[stage=render,results=rd]{dplyr:::methods_rd("select")}.


This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:
\Sexpr[stage=render,results=rd]{dplyr:::methods_rd("pull")}.
}

\section{Useful functions}{

\itemize{
\item Center: \code{\link[=mean]{mean()}}, \code{\link[=median]{median()}}
\item Spread: \code{\link[=sd]{sd()}}, \code{\link[=IQR]{IQR()}}, \code{\link[=mad]{mad()}}
\item Range: \code{\link[=min]{min()}}, \code{\link[=max]{max()}}, \code{\link[=quantile]{quantile()}}
\item Position: \code{\link[=first]{first()}}, \code{\link[=last]{last()}}, \code{\link[=nth]{nth()}},
\item Count: \code{\link[=n]{n()}}, \code{\link[=n_distinct]{n_distinct()}}
\item Logical: \code{\link[=any]{any()}}, \code{\link[=all]{all()}}
}
}

\section{Backend variations}{


The data frame backend supports creating a variable and using it in the
same summary. This means that previously created summary variables can be
further transformed or combined within the summary, as in \code{\link[=mutate]{mutate()}}.
However, it also means that summary variables with the same names as previous
variables overwrite them, making those variables unavailable to later summary
variables.

This behaviour may not be supported in other backends. To avoid unexpected
results, consider using new names for your summary variables, especially when
creating multiple summaries.
}

\section{Useful mutate functions}{

\itemize{
\item \code{\link{+}}, \code{\link{-}}, \code{\link[=log]{log()}}, etc., for their usual mathematical meanings
\item \code{\link[=lead]{lead()}}, \code{\link[=lag]{lag()}}
\item \code{\link[=dense_rank]{dense_rank()}}, \code{\link[=min_rank]{min_rank()}}, \code{\link[=percent_rank]{percent_rank()}}, \code{\link[=row_number]{row_number()}},
\code{\link[=cume_dist]{cume_dist()}}, \code{\link[=ntile]{ntile()}}
\item \code{\link[=cumsum]{cumsum()}}, \code{\link[=cummean]{cummean()}}, \code{\link[=cummin]{cummin()}}, \code{\link[=cummax]{cummax()}}, \code{\link[=cumany]{cumany()}}, \code{\link[=cumall]{cumall()}}
\item \code{\link[=na_if]{na_if()}}, \code{\link[=coalesce]{coalesce()}}
\item \code{\link[=if_else]{if_else()}}, \code{\link[=recode]{recode()}}, \code{\link[=case_when]{case_when()}}
}
}

\section{Scoped selection and renaming}{


Use the three scoped variants (\code{\link[=rename_all]{rename_all()}}, \code{\link[=rename_if]{rename_if()}}, \code{\link[=rename_at]{rename_at()}})
to renaming a set of variables with a function.
}

\examples{

data(pasilla)
pasilla |> distinct(.sample)


data(pasilla)
pasilla |>  filter(.sample == "untrt1")

# Learn more in ?dplyr_tidy_eval


data(pasilla)
pasilla  |> group_by(.sample)


data(pasilla)
pasilla |> summarise(mean(counts))

data(pasilla)
pasilla |> mutate(logcounts=log2(counts))


data(pasilla)
pasilla |> rename(cond=condition)

print("To come...")

data(pasilla)

tt <- pasilla
tt |> left_join(tt |> distinct(condition) |> mutate(new_column=1:2))

data(pasilla)

tt <- pasilla
tt |> inner_join(tt |> distinct(condition) |> mutate(new_column=1:2) |> slice(1))


data(pasilla)

tt <- pasilla
tt |> right_join(tt |> distinct(condition) |> mutate(new_column=1:2) |> slice(1))


data(pasilla)

tt <- pasilla
tt |> full_join(tibble::tibble(condition="treated", dose=10))


data(pasilla)

pasilla |> slice(1)

data(pasilla)

pasilla |> select(.sample, .feature, counts)


data(pasilla)

pasilla |>

    sample_n(50)
pasilla |>

    sample_frac(0.1)

se |> count(dex)


data(pasilla)
pasilla |>

    pull(feature)
}
\seealso{
\code{\link[=filter_all]{filter_all()}}, \code{\link[=filter_if]{filter_if()}} and \code{\link[=filter_at]{filter_at()}}.
}
\concept{single table verbs}
\keyword{internal}
